// /public/js/productorderdetail-create.js  (no proorder_id)
document.addEventListener("DOMContentLoaded", () => {
  const $ = (id) => document.getElementById(id);
  const toNum = (v, d = 0) => {
    if (typeof v === "string") v = v.replace(/,/g, "");
    const n = Number(v);
    return Number.isFinite(n) ? n : d;
  };
  const fmtMoney = (n) =>
    Number(n || 0).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
  const round2 = (n) => Math.round((Number(n) || 0) * 100) / 100;

  // üÜï formatter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (‡πÑ‡∏ß‡πâ‡πÇ‡∏ä‡∏ß‡πå reorder ‡∏™‡∏ß‡∏¢ ‡πÜ)
  const fmt = (n) => Number(n || 0).toLocaleString(undefined, { maximumFractionDigits: 2 });

  // back
  $("btnBack")?.addEventListener("click", (e) => {
    e.preventDefault();
    if (document.referrer) history.back();
    else location.href = "/productorder/index.html";
  });

  // ‡πÇ‡∏´‡∏•‡∏î option ‡∏à‡∏≤‡∏Å route ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
  async function loadOptions() {
    const chemUrls = ["/chem/read-all?limit=5000", "/chem/read", "/chem/search?q=a"];
    const companyUrls = ["/company/read"];

    async function tryFetch(urls, mapper) {
      for (const url of urls) {
        try {
          const res = await fetch(url, { headers: { Accept: "application/json" } });
          if (!res.ok) continue;
          const data = await res.json();
          const arr = Array.isArray(data)
            ? data
            : Array.isArray(data.items) ? data.items
            : Array.isArray(data.data)  ? data.data
            : Array.isArray(data.rows)  ? data.rows
            : null;
          if (!arr || !arr.length) continue;
          const mapped = arr.map(mapper).filter(Boolean);
          if (mapped.length) return mapped;
        } catch {}
      }
      return [];
    }

    const mapChem = (x) => {
      const id = x.id ?? x.chem_id ?? x.CHEM_ID ?? x.chemId;
      const name = x.chem_name ?? x.name ?? x.CHEM_NAME ?? x.chemName ?? x.inci_name;
      if (!id || !name) return null;
      return { id: Number(id), name: String(name) };
    };
    const mapCompany = (x) => {
      const id = x.id ?? x.company_id ?? x.COMPANY_ID ?? x.companyId;
      const name = x.company_name ?? x.name ?? x.COMPANY_NAME ?? x.companyName;
      if (!id || !name) return null;
      return { id: Number(id), name: String(name) };
    };

    const [chemItems, compItems] = await Promise.all([
      tryFetch(chemUrls, mapChem),
      tryFetch(companyUrls, mapCompany),
    ]);

    if (!chemItems.length) throw new Error("‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    if (!compItems.length) throw new Error("‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    const chemSel = $("chem_id");
    chemItems.forEach((x) => {
      const op = document.createElement("option");
      op.value = x.id;
      op.textContent = x.name;
      chemSel.appendChild(op);
    });

    const compSel = $("company_id");
    compItems.forEach((x) => {
      const op = document.createElement("option");
      op.value = x.id;
      op.textContent = x.name;
      compSel.appendChild(op);
    });

    // üÜï ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ reorder ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ selected ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    if (chemSel?.value) {
      await updateChemReorder(+chemSel.value);
    }
  }

  loadOptions().catch((err) => {
    console.error(err);
    alert(err.message || "‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  });

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏£‡∏±‡∏° = orderbuy / orderuse
  const totalInput = $("orderbuy");
  const qtyInput   = $("orderuse");
  const unitBox    = $("chem_price");

  // üÜï ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏£‡∏±‡∏° (‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)
  if (unitBox) {
    unitBox.readOnly = true;
  }

  function recalc() {
    const total = toNum(totalInput.value, 0);
    const qty   = toNum(qtyInput.value, 0);
    const unit  = qty > 0 ? round2(total / qty) : 0;
    unitBox.value = fmtMoney(unit);
  }
  totalInput.addEventListener("input", recalc);
  qtyInput.addEventListener("input", recalc);

async function updateChemReorder(chemId) {
  const help = document.getElementById('orderuse_help');
  const qtyInput = document.getElementById('orderuse');
  if (!chemId) {
    help && (help.textContent = 'reorder');
    qtyInput?.setAttribute('placeholder', '‡πÄ‡∏ä‡πà‡∏ô 2500');
    return;
  }

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà "‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á" ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏Ñ‡∏∏‡∏ì
  const candidates = [
    `/chem/detail?id=${chemId}`,   // ‡∏Ñ‡∏∑‡∏ô object ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    `/chem/read/${chemId}`,        // ‡∏Ñ‡∏∑‡∏ô array
    // ‡∏™‡∏≥‡∏£‡∏≠‡∏á ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
    `/chem/${chemId}`,
  ];

  let reorder = null, ok = false;
  for (const url of candidates) {
    try {
      const res = await fetch(url, { headers: { Accept: 'application/json' } });
      if (!res.ok) continue;
      const data = await res.json();

      // map ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö
      const row = Array.isArray(data) ? (data[0] || null) : data;
      if (row) {
        reorder =
          row.chem_reorder ??
          row.CHEM_REORDER ??
          row.reorder ??
          row.data?.chem_reorder ??
          null;
        ok = true;
        break;
      }
    } catch {}
  }

  const fmt = (n) => Number(n || 0).toLocaleString(undefined, { maximumFractionDigits: 2 });
  if (ok && reorder != null) {
    help && (help.textContent = `reorder: ${fmt(reorder)} ‡∏Å‡∏£‡∏±‡∏°`);
    qtyInput && (qtyInput.placeholder = String(reorder));
    // qtyInput.min = String(Number(reorder) || 0); // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
  } else {
    help && (help.textContent = 'reorder: -');
    qtyInput?.setAttribute('placeholder', '‡πÄ‡∏ä‡πà‡∏ô 2500');
  }
}

  // üÜï ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏Ñ‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î reorder ‡πÉ‡∏´‡∏°‡πà
  $("chem_id")?.addEventListener("change", (e) => {
    const val = Number(e.target.value || 0);
    updateChemReorder(val);
  });

  // ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (placeholder)
  $("btnUploadCoa")?.addEventListener("click", () => alert("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î COA ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"));
  $("btnUploadMsds")?.addEventListener("click", () => alert("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î MSDS ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"));

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  $("formCreate").addEventListener("submit", async (e) => {
    e.preventDefault();

    const chem_id    = toNum(($("chem_id").value || 0), 0);
    const company_id = toNum(($("company_id").value || 0), 0);
    const orderuse   = toNum(qtyInput.value, 0);
    const orderbuy   = toNum(totalInput.value, 0);
    const chem_price = orderuse > 0 ? round2(orderbuy / orderuse) : 0;

    if (!chem_id)    return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤");
    if (!company_id) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏™‡∏≤‡∏£‡πÄ‡∏Ñ‡∏°‡∏µ");
    if (orderuse < 200) return alert("‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 200");

    const payload = {
      prodetail_id: null,
      chem_id,
      proorder_id: null,     // ‚úÖ ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
      company_id,
      orderuse,
      chem_price,            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
      orderbuy,              // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢
      coa:  ($("coa").value || "").trim() || null,
      msds: ($("msds").value || "").trim() || null,
    };

    try {
      const res = await fetch("/productorderdetail/create", {
        method: "POST",
        headers: { "Content-Type": "application/json", Accept: "application/json" },
        body: JSON.stringify(payload),
      });
      const data = await res.json().catch(() => ({}));
      if (!res.ok) throw new Error(data.error || `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${res.status})`);

      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á
      location.href = `/productorderdetail/index.html`;
    } catch (err) {
      console.error(err);
      alert(err.message || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  });
});
